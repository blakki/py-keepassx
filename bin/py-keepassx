#!/usr/bin/env python

import pykeepassx
import cmd
import getpass
import os
import functools
import datetime
import threading
import time

HIST_FILE = os.path.expanduser("~/.py-keepassx.history")
IDLE_TIME_MINUTES = 2


class KDBDatabaseCli(cmd.Cmd):
    def __init__(self, filename=None):
        self.cd_stack = list()
        self.cur_group = None
        self.idle_check_thread = None

        cmd.Cmd.__init__(self)

        self._init()

        if filename:
            self.do_open(filename)

        self.prompt = "[py-keepassx]: "

    def emptyline(self):
        # Prevent default behaviour and do not rerun last command
        pass

    def postcmd(self, stop, line):
        if self.idle_check_thread:
            self.idle_check_thread.last_activity = datetime.datetime.now()

        return stop

    def help_help(self):
        print("Show help")

    def help_open(self):
        print("Open the given database file.")
        print("")
        self.usage_open()

    def usage_open(self):
        print("Usage: open <filename>")

    def complete_open(self, text, line, begidx, endidx):
        splitted = line.split(' ')

        # only do completion if user is writing the first argument
        if len(splitted) != 2:
            return

        full_path = os.path.expanduser(splitted[1])

        # Check if it's a directory
        if full_path.endswith(os.sep):
            # Find files from that directory
            files = os.listdir(full_path)
            # Use full paths
            files = map(lambda x: os.path.join(full_path, x), files)
            # Add path separator if file is directory and empty space if file is normal file
            files = map(lambda x: x + os.sep if os.path.isdir(x) else x + " ", files)
        else:
            dir_part, file_part = os.path.split(full_path)

            # Special case: handle ..
            if file_part == "..":
                return (full_path + os.sep, )

            directory = dir_part or os.getcwd()

            # take only files which start with file_part
            files = filter(lambda x: x.startswith(file_part), os.listdir(directory))

            if dir_part:
                # Add directory part to files
                files = map(lambda x: os.path.join(dir_part, x), files)

            # Add file and directory indicators
            files = map(lambda x: x + os.sep if os.path.isdir(x) else x + " ", files)

        return files

    def do_open(self, filename):
        if not filename:
            self.usage_open()
            return

        if self.is_open():
            self.do_close()

        db = pykeepassx.Database(filename)

        if db.is_locked():
            open_anyway = self._input_yes_no("Database is already open. Open anyway?", False)

            if not open_anyway:
                return

        try:
            db.lock()
            db.read_file()
            db.parse_header()

            pw = getpass.getpass("Password: ")
            db.decrypt(pw)
            db.parse_body()
            self.db = db
        except pykeepassx.DatabaseException as e:
            print(e)
            db.unlock()
            return

        self.cur_group = self.db.get_root_group()
        self.idle_check_thread = IdleCheckThread(self._timeout_close)
        self.idle_check_thread.start()

        print("Opened.")

    def _timeout_close(self):
        self.do_clear()
        print("Database closed (timeout).")
        self._close()

    def help_close(self):
        print("Close the currently open database.")

    def do_close(self, _=None):
        if not self.db:
            print("No database currently open.")
            return

        self._close()

    def help_cat(self):
        print("Read the given entry.")

    def complete_cat(self, text, line, begidx, endidx):
        return self._complete_entry(text)

    def _complete_entry(self, text):
        if not self.cur_group:
            return

        entries = list()

        for e in self.cur_group.entries:
            if e.title and e.title.startswith(text):
                entries.append(e.title)

        return entries

    def do_cat(self, entry_name):
        if not self.is_open():
            print("cat: No database currently opened")
            return

        entry = self._get_entry(entry_name)

        if not entry:
            print("cat: No such entry")
            return

        print("{title}".format(title=entry.title))
        print("{sep}".format(sep="-" * len(entry.title)))
        print("")
        print("url:     {url}".format(url=entry.url))
        print("user:    {user}".format(user=entry.username))
        print("pass:    <<secret>>")
        print("comment: {comment}".format(comment=entry.comment))

    def help_passwd(self):
        print("Show the password of the given entry.")

    def complete_passwd(self, text, line, begidx, endidx):
        return self._complete_entry(text)

    def do_passwd(self, entry_name):
        if not self.is_open():
            print("passwd: No database currently opened")
            return

        entry = self._get_entry(entry_name)

        if not entry:
            print("passwd: No such entry")
            return

        print("passwd: {pw}".format(pw=entry.password))

    def help_ls(self):
        print("Show entries in current working group.")

    def do_ls(self, _):
        if not self.is_open():
            print("ls: No database currently opened")
            return

        for g in self.cur_group.children:
            print("+ {title}".format(title=g.title))
        for e in sorted(self.cur_group.entries, key=lambda x: x.title.lower() if x else x):
            print("x {title}".format(title=e.title))

    def help_clear(self, _):
        print("Clear the screen.")

    def do_clear(self, _=None):
        cmds = {
            'nt': functools.partial(os.system, 'cls'),
            'posix': functools.partial(os.system, 'clear'),
        }

        try:
            cmds[os.name]()
        except KeyError:
            print("Don't know how to clear screen in {os}.".format(os=os.name))

    def help_cd(self):
        print("Change the working group.")

    def complete_cd(self, text, line, begidx, endidx):
        group_names = list()

        if not self.cur_group:
            return

        for g in self.cur_group.children:
            if g.title and g.title.startswith(text):
                group_names.append(g.title)

        return group_names

    def do_cd(self, path):
        if not self.is_open():
            print("cd: No database currently opened")
            return

        new_group = None

        if path == "..":
            try:
                new_group = self.cd_stack.pop()
            except IndexError:
                new_group = self.cur_group
        else:
            for g in self.cur_group.children:
                if g.title == path:
                    new_group = g
                    break

        if new_group:
            if self.cur_group.level < new_group.level:
                self.cd_stack.append(self.cur_group)
            self.cur_group = new_group
        else:
            print("cd: No such group")

    def do_EOF(self, _):
        return self.do_quit()

    def do_quit(self, _=None):
        print("Bye.")
        self._close()
        return True

    def is_open(self):
        return self.db is not None

    def _get_entry(self, entry_name):
        for e in self.cur_group.get_entries():
            if e.title == entry_name:
                return e

    def _close(self):
        if self.idle_check_thread:
            self.idle_check_thread.stop()

        if self.db:
            self.db.unlock()

        self._init()

    def _init(self):
        self.db = None
        self.cd_stack = list()
        self.cur_group = None

    def _input_yes_no(self, prompt, default=False):
        choices = {
            'y': True,
            'yes': True,
            'n': False,
            'no': False,
        }

        if default is None:
            prompt_yn = "y/n"
        elif default is True:
            prompt_yn = "Y/n"
        else:
            prompt_yn = "y/N"

        prompt = "{0} [{1}]: ".format(prompt, prompt_yn)

        while True:
            choice = raw_input(prompt).lower()

            if not choice:
                if default is not None:
                    return default

                continue
            try:
                return choices[choice]
            except KeyError:
                pass


class IdleCheckThread(threading.Thread):
    def __init__(self, callback):
        self.last_activity = None
        self.keep_running = True
        self.callback = callback

        threading.Thread.__init__(self)

    def stop(self):
        self.keep_running = False

    def run(self):

        while self.keep_running:
            time.sleep(0.1)

            allowed_idle_time = datetime.timedelta(minutes=IDLE_TIME_MINUTES)

            if self.last_activity and datetime.datetime.now() - self.last_activity > allowed_idle_time:
                self.keep_running = False
                self.callback()


if __name__ == '__main__':
    import sys
    import readline

    readline.set_completer_delims(" ")

    if os.path.exists(HIST_FILE):
        readline.read_history_file(HIST_FILE)
    cli = None

    try:
        filename = None
        if len(sys.argv) > 1:
            filename = sys.argv[1]

        cli = KDBDatabaseCli(filename)
        cli.cmdloop()
    except KeyboardInterrupt:
        pass
    finally:
        if cli and cli.is_open():
            cli.do_close()

    readline.write_history_file(HIST_FILE)
